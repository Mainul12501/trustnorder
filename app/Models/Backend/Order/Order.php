<?php

namespace App\Models\Backend\Order;

use App\helper\ViewHelper;
use App\Models\Backend\Product\Category;
use App\Models\User;
use Illuminate\Database\Eloquent\Model;

class Order extends Model
{
    protected $fillable = [
        'user_id',
        'category_id',
        'order_placing_method',
        'is_image_extracted',
        'user_order_image',
        'user_inputed_items',
        'note',
        'delivery_charge',
        'order_total',
        'paid_amount',
        'order_status',
        'status',
        'is_viewed',
        'is_req_for_rejection',
        'req_for_rejection_status',
        'order_payment_type',
        'order_payment_status',
        'partial_amount',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::deleting(function ($order) {
            if (count($order->orderDetails) > 0)
            {
                $order->orderDetails->each->delete();
            }
            if (file_exists($order->user_order_image))
            {
                unlink($order->user_order_image);
            }
        });
    }

    public static function createOrder($request, $order = null)
    {
        if (is_null($order))
        {
            $order = new Order();
        }
        $order->user_id = ViewHelper::loggedUser()->id;
        $order->category_id    = $request->category_id;
        $order->order_placing_method    = $request->order_placing_method;
        if ($order->order_placing_method == 'image')
        {
            $order->user_order_image    = self::saveAndGenerateSubImagesPaths($request, $order->id ?? null);
        } elseif ($order->order_placing_method == 'items')
        {
            $order->user_inputed_items    = self::convertOrderArrayToJson($request) ?? '';
        }
        $order->note    = $request->note;
        $order->order_payment_type    = $request->order_payment_type;
//        $order->delivery_charge    = $request->delivery_charge;
        $order->save();
        return $order;
    }

    public static function saveAndGenerateSubImagesPaths($request, $id = null)
    {
        if (isset($request->user_order_image))
        {
            if (isset($id))
            {
                $existData = Order::find($id);
                if (isset($existData->user_order_image))
                {
                    foreach (json_decode($existData->user_order_image) as $item)
                    {
                        if (file_exists($item))
                            unlink($item);
                    }
                }
            }
            $jsonArray = [];
            foreach ($request->user_order_image as $sub_image)
            {
                array_push($jsonArray, imageUpload($sub_image, 'order', 'order-', 300, 400));
            }
            return json_encode($jsonArray);
        } else{
            if (isset($id))
            {
                return $existData = Order::find($id)->user_order_image;
            } else {
                return null;
            }
        }
    }

    public static function convertOrderArrayToJson($request)
    {
        return json_encode($request->items);
        $finalArray = [];
        if (isset($request->items))
        {
            foreach ($request->items as $item)
            {
                array_push($finalArray, $item);
            }
            return json_encode($finalArray);
        }
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function category()
    {
        return $this->belongsTo(Category::class);
    }

    public function orderDetails()
    {
        return $this->hasMany(OrderDetails::class );
    }
}
